// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"fmt"
)

type Error string

const (
	ErrorBadRequest Error = "Bad Request"
)

func (e Error) ToPointer() *Error {
	return &e
}
func (e *Error) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bad Request":
		*e = Error(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Error: %v", v)
	}
}

type ValidationBadRequestResponse struct {
	// Detailed validation errors
	Message    []string `json:"message"`
	StatusCode float64  `json:"statusCode"`
	Error_     Error    `json:"error"`
}

var _ error = &ValidationBadRequestResponse{}

func (e *ValidationBadRequestResponse) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
