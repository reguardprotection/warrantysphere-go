// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// Feed - The feeds of users who can view the note.
type Feed string

const (
	FeedStaff    Feed = "staff"
	FeedCustomer Feed = "customer"
)

func (e Feed) ToPointer() *Feed {
	return &e
}
func (e *Feed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staff":
		fallthrough
	case "customer":
		*e = Feed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Feed: %v", v)
	}
}

type NoteAggregateAddress struct {
}

// NoteAggregateCreatedBy - The user who created the note.
type NoteAggregateCreatedBy struct {
	// Unique identifier for the user.
	ID string `json:"id"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified      time.Time             `json:"modified"`
	Email         string                `json:"email"`
	EmailVerified *bool                 `default:"false" json:"emailVerified"`
	PhoneNumber   *string               `default:"null" json:"phoneNumber"`
	DisplayName   string                `json:"displayName"`
	FriendlyName  *string               `default:"null" json:"friendlyName"`
	PhotoURL      *string               `default:"null" json:"photoURL"`
	Address       *NoteAggregateAddress `json:"address"`
	Birthday      *time.Time            `default:"null" json:"birthday"`
	LastSignedIn  *time.Time            `default:"null" json:"lastSignedIn"`
}

func (n NoteAggregateCreatedBy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NoteAggregateCreatedBy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NoteAggregateCreatedBy) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NoteAggregateCreatedBy) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *NoteAggregateCreatedBy) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *NoteAggregateCreatedBy) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *NoteAggregateCreatedBy) GetEmailVerified() *bool {
	if o == nil {
		return nil
	}
	return o.EmailVerified
}

func (o *NoteAggregateCreatedBy) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *NoteAggregateCreatedBy) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *NoteAggregateCreatedBy) GetFriendlyName() *string {
	if o == nil {
		return nil
	}
	return o.FriendlyName
}

func (o *NoteAggregateCreatedBy) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *NoteAggregateCreatedBy) GetAddress() *NoteAggregateAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *NoteAggregateCreatedBy) GetBirthday() *time.Time {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *NoteAggregateCreatedBy) GetLastSignedIn() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSignedIn
}

type NoteAggregate struct {
	// Unique ID of the payment
	ID string `json:"id"`
	// The title associated with the note.
	Title *string `json:"title"`
	// The content associated with the note.
	Content string `json:"content"`
	// The type of object associated with the note.
	ObjectType *string `json:"objectType"`
	// The unique identifier of the object associated with the note.
	ObjectID *string `json:"objectId"`
	// The feeds of users who can view the note.
	Feed Feed `json:"feed"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// The unique identifier of the user who created the note.
	CreatedByID *string `json:"createdById"`
	// The user who created the note.
	CreatedBy *NoteAggregateCreatedBy `json:"createdBy,omitempty"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// The unique identifier of the user who modified the note.
	ModifiedByID string `json:"modifiedById"`
	// The user who modified the note.
	ModifiedBy UserAggregate `json:"modifiedBy"`
	// Datetime when the object was deleted.
	Deleted *time.Time `json:"deleted"`
	// The unique identifier of the user who deleted the note.
	DeletedByID string `json:"deletedById"`
	// The user who deleted the note.
	DeletedBy UserAggregate `json:"deletedBy"`
}

func (n NoteAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NoteAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NoteAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NoteAggregate) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *NoteAggregate) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *NoteAggregate) GetObjectType() *string {
	if o == nil {
		return nil
	}
	return o.ObjectType
}

func (o *NoteAggregate) GetObjectID() *string {
	if o == nil {
		return nil
	}
	return o.ObjectID
}

func (o *NoteAggregate) GetFeed() Feed {
	if o == nil {
		return Feed("")
	}
	return o.Feed
}

func (o *NoteAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *NoteAggregate) GetCreatedByID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedByID
}

func (o *NoteAggregate) GetCreatedBy() *NoteAggregateCreatedBy {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *NoteAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *NoteAggregate) GetModifiedByID() string {
	if o == nil {
		return ""
	}
	return o.ModifiedByID
}

func (o *NoteAggregate) GetModifiedBy() UserAggregate {
	if o == nil {
		return UserAggregate{}
	}
	return o.ModifiedBy
}

func (o *NoteAggregate) GetDeleted() *time.Time {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *NoteAggregate) GetDeletedByID() string {
	if o == nil {
		return ""
	}
	return o.DeletedByID
}

func (o *NoteAggregate) GetDeletedBy() UserAggregate {
	if o == nil {
		return UserAggregate{}
	}
	return o.DeletedBy
}
