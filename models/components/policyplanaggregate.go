// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// PolicyPlanAggregatePolicy - Policy linked to the plan.
type PolicyPlanAggregatePolicy struct {
}

// CoverageConfigs - Configs for each coverage on the plan to determine if it is included in the plan per policy term.
type CoverageConfigs struct {
}

type PolicyPlanAggregate struct {
	// Unique identifier of the plan.
	ID string `json:"id"`
	// Sort order of plans (lower numbers appear first)
	Order *float64 `default:"0" json:"order"`
	// Datetime when the coverage was created.
	Created time.Time `json:"created"`
	// Datetime when the coverage was modified.
	Modified time.Time `json:"modified"`
	// Datetime when the coverage was deleted.
	Deleted time.Time `json:"deleted"`
	// General term to specify what the plan is about.
	Title string `json:"title"`
	// Description to specify what the coverage is about
	Description string `json:"description"`
	// Indicates if the plan should be visible to the user.
	Visible bool `json:"visible"`
	// Conditions required for a customer to be eligible to purchase this plan.
	Conditions ConditionGroupDto `json:"conditions"`
	// Unique identifier of the policy linked to this plan.
	PolicyID string `json:"policyId"`
	// Policy linked to the plan.
	Policy *PolicyPlanAggregatePolicy `json:"policy,omitempty"`
	// Groupings of coverages to optionally be added on to plans.
	Addons AddonDto `json:"addons"`
	// Groupings of coverage liabilities.
	LiabilityGroups LiabilityGroupDto `json:"liabilityGroups"`
	// Configs for each coverage on the plan to determine if it is included in the plan per policy term.
	CoverageConfigs CoverageConfigs `json:"coverageConfigs"`
	// Fees associated with the plan.
	Fees []PolicyPlanCoverageFeeAggregate `json:"fees,omitempty"`
}

func (p PolicyPlanAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PolicyPlanAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PolicyPlanAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PolicyPlanAggregate) GetOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PolicyPlanAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *PolicyPlanAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *PolicyPlanAggregate) GetDeleted() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Deleted
}

func (o *PolicyPlanAggregate) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *PolicyPlanAggregate) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *PolicyPlanAggregate) GetVisible() bool {
	if o == nil {
		return false
	}
	return o.Visible
}

func (o *PolicyPlanAggregate) GetConditions() ConditionGroupDto {
	if o == nil {
		return ConditionGroupDto{}
	}
	return o.Conditions
}

func (o *PolicyPlanAggregate) GetPolicyID() string {
	if o == nil {
		return ""
	}
	return o.PolicyID
}

func (o *PolicyPlanAggregate) GetPolicy() *PolicyPlanAggregatePolicy {
	if o == nil {
		return nil
	}
	return o.Policy
}

func (o *PolicyPlanAggregate) GetAddons() AddonDto {
	if o == nil {
		return AddonDto{}
	}
	return o.Addons
}

func (o *PolicyPlanAggregate) GetLiabilityGroups() LiabilityGroupDto {
	if o == nil {
		return LiabilityGroupDto{}
	}
	return o.LiabilityGroups
}

func (o *PolicyPlanAggregate) GetCoverageConfigs() CoverageConfigs {
	if o == nil {
		return CoverageConfigs{}
	}
	return o.CoverageConfigs
}

func (o *PolicyPlanAggregate) GetFees() []PolicyPlanCoverageFeeAggregate {
	if o == nil {
		return nil
	}
	return o.Fees
}
