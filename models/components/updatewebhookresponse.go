// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

type UpdateWebhookResponse struct {
	// Endpoint will only fire if event contains matching distributor ID(s). Empty array will match all events.
	DistributorIds []string `json:"distributorIds,omitempty"`
	// URL to update endpoint to point to
	URL *string `json:"url,omitempty"`
	// Description of endpoint
	Description *string `default:"null" json:"description"`
	// If endpoint is disabled
	Disabled *bool `json:"disabled,omitempty"`
	// Events to trigger the endpoint. Empty array will trigger all events
	EventTypes []string  `json:"eventTypes,omitempty"`
	CreatedAt  time.Time `json:"createdAt"`
	// Id of endpoint to update
	ID string `json:"id"`
}

func (u UpdateWebhookResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateWebhookResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateWebhookResponse) GetDistributorIds() []string {
	if o == nil {
		return nil
	}
	return o.DistributorIds
}

func (o *UpdateWebhookResponse) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *UpdateWebhookResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateWebhookResponse) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UpdateWebhookResponse) GetEventTypes() []string {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *UpdateWebhookResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateWebhookResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}
