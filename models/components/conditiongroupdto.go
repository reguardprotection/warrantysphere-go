// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Comparison operator for the condition.
type Comparison string

const (
	ComparisonAnd Comparison = "AND"
	ComparisonOr  Comparison = "OR"
)

func (e Comparison) ToPointer() *Comparison {
	return &e
}
func (e *Comparison) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = Comparison(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Comparison: %v", v)
	}
}

type ConditionGroupDto struct {
	// Comparison operator for the condition.
	Comparison Comparison `json:"comparison"`
	// Array of conditions
	Conditions [][]string `json:"conditions"`
}

func (o *ConditionGroupDto) GetComparison() Comparison {
	if o == nil {
		return Comparison("")
	}
	return o.Comparison
}

func (o *ConditionGroupDto) GetConditions() [][]string {
	if o == nil {
		return [][]string{}
	}
	return o.Conditions
}
