// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// Item - Processed document.
type Item struct {
}

// StorageItemProcessorResultAggregateStatus - Status of the run.
type StorageItemProcessorResultAggregateStatus string

const (
	StorageItemProcessorResultAggregateStatusProcessing StorageItemProcessorResultAggregateStatus = "PROCESSING"
	StorageItemProcessorResultAggregateStatusProcessed  StorageItemProcessorResultAggregateStatus = "PROCESSED"
	StorageItemProcessorResultAggregateStatusFailed     StorageItemProcessorResultAggregateStatus = "FAILED"
)

func (e StorageItemProcessorResultAggregateStatus) ToPointer() *StorageItemProcessorResultAggregateStatus {
	return &e
}
func (e *StorageItemProcessorResultAggregateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "PROCESSED":
		fallthrough
	case "FAILED":
		*e = StorageItemProcessorResultAggregateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageItemProcessorResultAggregateStatus: %v", v)
	}
}

// Error - Processor-defined JSON object containing error details when applicable.
//
// Conditional: Only populated when the run status is 'FAILED'.
type Error struct {
}

type StorageItemProcessorResultAggregate struct {
	// Unique identifier of the processor run/result.
	ID string `json:"id"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Datetime when the object was deleted.
	Deleted *time.Time `json:"deleted"`
	// Unique identifier of the processor used to process the document.
	ProcessorID string `json:"processorId"`
	// Details of the processor used to process the document.
	Processor *StorageItemProcessorAggregate `json:"processor,omitempty"`
	// Unqiue identifier of the processed document.
	ItemID string `json:"itemId"`
	// Processed document.
	Item *Item `json:"item,omitempty"`
	// Status of the run.
	Status StorageItemProcessorResultAggregateStatus `json:"status"`
	// Download URL of the results of the run (processor output). Always includes short-lived authentication tokens.
	OutputDownloadURL *string `json:"outputDownloadUrl"`
	// System-defined unique identifier.
	ExternalID *string `json:"externalId"`
	// Processor-defined JSON object containing error details when applicable.
	//
	// Conditional: Only populated when the run status is 'FAILED'.
	Error *Error `json:"error"`
}

func (s StorageItemProcessorResultAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StorageItemProcessorResultAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StorageItemProcessorResultAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StorageItemProcessorResultAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *StorageItemProcessorResultAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *StorageItemProcessorResultAggregate) GetDeleted() *time.Time {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *StorageItemProcessorResultAggregate) GetProcessorID() string {
	if o == nil {
		return ""
	}
	return o.ProcessorID
}

func (o *StorageItemProcessorResultAggregate) GetProcessor() *StorageItemProcessorAggregate {
	if o == nil {
		return nil
	}
	return o.Processor
}

func (o *StorageItemProcessorResultAggregate) GetItemID() string {
	if o == nil {
		return ""
	}
	return o.ItemID
}

func (o *StorageItemProcessorResultAggregate) GetItem() *Item {
	if o == nil {
		return nil
	}
	return o.Item
}

func (o *StorageItemProcessorResultAggregate) GetStatus() StorageItemProcessorResultAggregateStatus {
	if o == nil {
		return StorageItemProcessorResultAggregateStatus("")
	}
	return o.Status
}

func (o *StorageItemProcessorResultAggregate) GetOutputDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.OutputDownloadURL
}

func (o *StorageItemProcessorResultAggregate) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *StorageItemProcessorResultAggregate) GetError() *Error {
	if o == nil {
		return nil
	}
	return o.Error
}
