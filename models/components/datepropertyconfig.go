// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// Format - The format of the property
type Format string

const (
	FormatDate     Format = "date"
	FormatDatetime Format = "datetime"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		fallthrough
	case "datetime":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type DatePropertyConfig struct {
	// The format of the property
	Format *Format `json:"format"`
	// The minimum date allowed
	Min *time.Time `json:"min,omitempty"`
	// The minimum date allowed
	Max *time.Time `json:"max,omitempty"`
}

func (d DatePropertyConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatePropertyConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatePropertyConfig) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *DatePropertyConfig) GetMin() *time.Time {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *DatePropertyConfig) GetMax() *time.Time {
	if o == nil {
		return nil
	}
	return o.Max
}
