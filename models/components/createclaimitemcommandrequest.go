// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CreateClaimItemCommandRequestStatus - Status of the claim item.
type CreateClaimItemCommandRequestStatus string

const (
	CreateClaimItemCommandRequestStatusDraft    CreateClaimItemCommandRequestStatus = "DRAFT"
	CreateClaimItemCommandRequestStatusApproved CreateClaimItemCommandRequestStatus = "APPROVED"
	CreateClaimItemCommandRequestStatusRejected CreateClaimItemCommandRequestStatus = "REJECTED"
	CreateClaimItemCommandRequestStatusResolved CreateClaimItemCommandRequestStatus = "RESOLVED"
)

func (e CreateClaimItemCommandRequestStatus) ToPointer() *CreateClaimItemCommandRequestStatus {
	return &e
}
func (e *CreateClaimItemCommandRequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "RESOLVED":
		*e = CreateClaimItemCommandRequestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClaimItemCommandRequestStatus: %v", v)
	}
}

type CreateClaimItemCommandRequest struct {
	// Status of the claim item.
	Status *CreateClaimItemCommandRequestStatus `json:"status,omitempty"`
	// Description of the claim item if no coverage was given.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the coverage associated with the claim item.
	CoverageID *string `json:"coverageId,omitempty"`
	// Amounts tracked for the associated claim item.
	Amount *AmountDto `json:"amount,omitempty"`
	// Cure associated with the claim item.
	Cure *CureDto `json:"cure,omitempty"`
	// Resolution associated with the claim item.
	Resolution *ResolutionDto `json:"resolution,omitempty"`
	// Reason given as to why the claim was adjudicated.
	AdjudicationReason *string `json:"adjudicationReason,omitempty"`
}

func (o *CreateClaimItemCommandRequest) GetStatus() *CreateClaimItemCommandRequestStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateClaimItemCommandRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateClaimItemCommandRequest) GetCoverageID() *string {
	if o == nil {
		return nil
	}
	return o.CoverageID
}

func (o *CreateClaimItemCommandRequest) GetAmount() *AmountDto {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateClaimItemCommandRequest) GetCure() *CureDto {
	if o == nil {
		return nil
	}
	return o.Cure
}

func (o *CreateClaimItemCommandRequest) GetResolution() *ResolutionDto {
	if o == nil {
		return nil
	}
	return o.Resolution
}

func (o *CreateClaimItemCommandRequest) GetAdjudicationReason() *string {
	if o == nil {
		return nil
	}
	return o.AdjudicationReason
}
