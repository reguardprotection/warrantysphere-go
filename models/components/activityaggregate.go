// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

type ActivityAggregateFeed string

const (
	ActivityAggregateFeedStaff    ActivityAggregateFeed = "staff"
	ActivityAggregateFeedCustomer ActivityAggregateFeed = "customer"
)

func (e ActivityAggregateFeed) ToPointer() *ActivityAggregateFeed {
	return &e
}
func (e *ActivityAggregateFeed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staff":
		fallthrough
	case "customer":
		*e = ActivityAggregateFeed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityAggregateFeed: %v", v)
	}
}

type ActivityAggregateAddress struct {
}

// TriggeredBy - The user who triggered the activity.
type TriggeredBy struct {
	// Unique identifier for the user.
	ID string `json:"id"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified      time.Time                 `json:"modified"`
	Email         string                    `json:"email"`
	EmailVerified *bool                     `default:"false" json:"emailVerified"`
	PhoneNumber   *string                   `default:"null" json:"phoneNumber"`
	DisplayName   string                    `json:"displayName"`
	FriendlyName  *string                   `default:"null" json:"friendlyName"`
	PhotoURL      *string                   `default:"null" json:"photoURL"`
	Address       *ActivityAggregateAddress `json:"address"`
	Birthday      *time.Time                `default:"null" json:"birthday"`
	LastSignedIn  *time.Time                `default:"null" json:"lastSignedIn"`
}

func (t TriggeredBy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TriggeredBy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TriggeredBy) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TriggeredBy) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TriggeredBy) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *TriggeredBy) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TriggeredBy) GetEmailVerified() *bool {
	if o == nil {
		return nil
	}
	return o.EmailVerified
}

func (o *TriggeredBy) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *TriggeredBy) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *TriggeredBy) GetFriendlyName() *string {
	if o == nil {
		return nil
	}
	return o.FriendlyName
}

func (o *TriggeredBy) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *TriggeredBy) GetAddress() *ActivityAggregateAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *TriggeredBy) GetBirthday() *time.Time {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *TriggeredBy) GetLastSignedIn() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSignedIn
}

type ActivityAggregate struct {
	// Unique identifier of the activity.
	ID string `json:"id"`
	// The description of the activity.
	Text string `json:"text"`
	// The icon of the activity.
	Icon *string `json:"icon,omitempty"`
	// The feeds of users who can view the note.
	Feed []ActivityAggregateFeed `json:"feed"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// The unique identifier of the user who triggered the activity.
	TriggeredByID string `json:"triggeredById"`
	// The user who triggered the activity.
	TriggeredBy *TriggeredBy `json:"triggeredBy,omitempty"`
}

func (a ActivityAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ActivityAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ActivityAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ActivityAggregate) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

func (o *ActivityAggregate) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ActivityAggregate) GetFeed() []ActivityAggregateFeed {
	if o == nil {
		return []ActivityAggregateFeed{}
	}
	return o.Feed
}

func (o *ActivityAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *ActivityAggregate) GetTriggeredByID() string {
	if o == nil {
		return ""
	}
	return o.TriggeredByID
}

func (o *ActivityAggregate) GetTriggeredBy() *TriggeredBy {
	if o == nil {
		return nil
	}
	return o.TriggeredBy
}
