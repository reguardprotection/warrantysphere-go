// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
)

// CancelWarrantyResponseBodyStatus - Status of the warranty.
type CancelWarrantyResponseBodyStatus string

const (
	CancelWarrantyResponseBodyStatusDraft      CancelWarrantyResponseBodyStatus = "DRAFT"
	CancelWarrantyResponseBodyStatusActivated  CancelWarrantyResponseBodyStatus = "ACTIVATED"
	CancelWarrantyResponseBodyStatusCancelled  CancelWarrantyResponseBodyStatus = "CANCELLED"
	CancelWarrantyResponseBodyStatusRegistered CancelWarrantyResponseBodyStatus = "REGISTERED"
	CancelWarrantyResponseBodyStatusExpired    CancelWarrantyResponseBodyStatus = "EXPIRED"
)

func (e CancelWarrantyResponseBodyStatus) ToPointer() *CancelWarrantyResponseBodyStatus {
	return &e
}
func (e *CancelWarrantyResponseBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "ACTIVATED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "REGISTERED":
		fallthrough
	case "EXPIRED":
		*e = CancelWarrantyResponseBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelWarrantyResponseBodyStatus: %v", v)
	}
}

type CancelWarrantyResponseBody struct {
	// Unique ID of the warranty.
	ID string `json:"id"`
	// Status of the warranty.
	Status *CancelWarrantyResponseBodyStatus `default:"CANCELLED" json:"status"`
}

func (c CancelWarrantyResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CancelWarrantyResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CancelWarrantyResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelWarrantyResponseBody) GetStatus() *CancelWarrantyResponseBodyStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
