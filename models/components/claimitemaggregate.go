// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

type ClaimItemAggregateStatus string

const (
	ClaimItemAggregateStatusDraft    ClaimItemAggregateStatus = "DRAFT"
	ClaimItemAggregateStatusApproved ClaimItemAggregateStatus = "APPROVED"
	ClaimItemAggregateStatusRejected ClaimItemAggregateStatus = "REJECTED"
	ClaimItemAggregateStatusResolved ClaimItemAggregateStatus = "RESOLVED"
)

func (e ClaimItemAggregateStatus) ToPointer() *ClaimItemAggregateStatus {
	return &e
}
func (e *ClaimItemAggregateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "RESOLVED":
		*e = ClaimItemAggregateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimItemAggregateStatus: %v", v)
	}
}

// Amount - The combined total, standard, and goodwill amounts of claim item.
type Amount struct {
}

// Resolution of the claim item.
type Resolution struct {
}

// Cure added to the claim item.
type Cure struct {
}

type ClaimItemAggregate struct {
	// Unique identifier of the claim item.
	ID     string                   `json:"id"`
	Status ClaimItemAggregateStatus `json:"status"`
	// Description of the claim item provided if no coverage was added.
	Description string `json:"description"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Datetime when the object was deleted.
	Deleted *time.Time `json:"deleted"`
	// Unique identifier of the coverage linked to this claim item.
	CoverageID string `json:"coverageId"`
	// Coverage linked to this claim item.
	Coverage *CoverageAggregate `json:"coverage,omitempty"`
	// Unique ID of the claim linked to this claim item.
	ClaimID string `json:"claimId"`
	// Claim linked to this claim item.
	Claim ClaimAggregate `json:"claim"`
	// The combined total, standard, and goodwill amounts of claim item.
	Amount *Amount `json:"amount"`
	// Reason for approval/rejection of claim item.
	AdjudicationReason string `json:"adjudicationReason"`
	// Resolution of the claim item.
	Resolution *Resolution `json:"resolution"`
	// Cure added to the claim item.
	Cure *Cure `json:"cure"`
	// Reason for the deletion of the claim item.
	DeletedReason string `json:"deletedReason"`
	// Unique identifier of the user who deleted the claim item.
	DeletedByID string `json:"deletedById"`
	// User that deleted the claim item.
	DeletedBy *UserAggregate `json:"deletedBy,omitempty"`
}

func (c ClaimItemAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClaimItemAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClaimItemAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClaimItemAggregate) GetStatus() ClaimItemAggregateStatus {
	if o == nil {
		return ClaimItemAggregateStatus("")
	}
	return o.Status
}

func (o *ClaimItemAggregate) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ClaimItemAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *ClaimItemAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *ClaimItemAggregate) GetDeleted() *time.Time {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *ClaimItemAggregate) GetCoverageID() string {
	if o == nil {
		return ""
	}
	return o.CoverageID
}

func (o *ClaimItemAggregate) GetCoverage() *CoverageAggregate {
	if o == nil {
		return nil
	}
	return o.Coverage
}

func (o *ClaimItemAggregate) GetClaimID() string {
	if o == nil {
		return ""
	}
	return o.ClaimID
}

func (o *ClaimItemAggregate) GetClaim() ClaimAggregate {
	if o == nil {
		return ClaimAggregate{}
	}
	return o.Claim
}

func (o *ClaimItemAggregate) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ClaimItemAggregate) GetAdjudicationReason() string {
	if o == nil {
		return ""
	}
	return o.AdjudicationReason
}

func (o *ClaimItemAggregate) GetResolution() *Resolution {
	if o == nil {
		return nil
	}
	return o.Resolution
}

func (o *ClaimItemAggregate) GetCure() *Cure {
	if o == nil {
		return nil
	}
	return o.Cure
}

func (o *ClaimItemAggregate) GetDeletedReason() string {
	if o == nil {
		return ""
	}
	return o.DeletedReason
}

func (o *ClaimItemAggregate) GetDeletedByID() string {
	if o == nil {
		return ""
	}
	return o.DeletedByID
}

func (o *ClaimItemAggregate) GetDeletedBy() *UserAggregate {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}
