// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

type ClaimAggregateStatus string

const (
	ClaimAggregateStatusOpen      ClaimAggregateStatus = "OPEN"
	ClaimAggregateStatusCancelled ClaimAggregateStatus = "CANCELLED"
	ClaimAggregateStatusClosed    ClaimAggregateStatus = "CLOSED"
	ClaimAggregateStatusExpired   ClaimAggregateStatus = "EXPIRED"
)

func (e ClaimAggregateStatus) ToPointer() *ClaimAggregateStatus {
	return &e
}
func (e *ClaimAggregateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CLOSED":
		fallthrough
	case "EXPIRED":
		*e = ClaimAggregateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimAggregateStatus: %v", v)
	}
}

type Items struct {
}

type ClaimAggregateClaimLifecycleSteps struct {
}

type ClaimAggregate struct {
	// Unique ID of the claim.
	ID string `json:"id"`
	// Date of the claim.
	ClaimDate time.Time `json:"claimDate"`
	// Auto Generated user friendly Number of the claim.
	ClaimNumber string `json:"claimNumber"`
	// User defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time            `json:"modified"`
	Status   ClaimAggregateStatus `json:"status"`
	// Reason of the cancellation
	CancellationReason string `json:"cancellationReason"`
	// Warranty linked to the claim.
	Warranty *WarrantyAggregate `json:"warranty,omitempty"`
	// Unique ID of the warranty linked to the claim.
	WarrantyID string `json:"warrantyId"`
	// Textual description of the issue or complaint.
	Complaint string `json:"complaint"`
	// Claim items associated with the claim.
	Items [][]Items `json:"items,omitempty"`
	// Notes associated with the claim.
	Notes []NoteAggregate `json:"notes,omitempty"`
	// Payments associated with the claim.
	ClaimPayments []ClaimPaymentAggregate `json:"claimPayments,omitempty"`
	// The claim lifecycle steps used for this claim.
	ClaimLifecycleSteps [][]ClaimAggregateClaimLifecycleSteps `json:"claimLifecycleSteps,omitempty"`
}

func (c ClaimAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClaimAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClaimAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClaimAggregate) GetClaimDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ClaimDate
}

func (o *ClaimAggregate) GetClaimNumber() string {
	if o == nil {
		return ""
	}
	return o.ClaimNumber
}

func (o *ClaimAggregate) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *ClaimAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *ClaimAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *ClaimAggregate) GetStatus() ClaimAggregateStatus {
	if o == nil {
		return ClaimAggregateStatus("")
	}
	return o.Status
}

func (o *ClaimAggregate) GetCancellationReason() string {
	if o == nil {
		return ""
	}
	return o.CancellationReason
}

func (o *ClaimAggregate) GetWarranty() *WarrantyAggregate {
	if o == nil {
		return nil
	}
	return o.Warranty
}

func (o *ClaimAggregate) GetWarrantyID() string {
	if o == nil {
		return ""
	}
	return o.WarrantyID
}

func (o *ClaimAggregate) GetComplaint() string {
	if o == nil {
		return ""
	}
	return o.Complaint
}

func (o *ClaimAggregate) GetItems() [][]Items {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *ClaimAggregate) GetNotes() []NoteAggregate {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *ClaimAggregate) GetClaimPayments() []ClaimPaymentAggregate {
	if o == nil {
		return nil
	}
	return o.ClaimPayments
}

func (o *ClaimAggregate) GetClaimLifecycleSteps() [][]ClaimAggregateClaimLifecycleSteps {
	if o == nil {
		return nil
	}
	return o.ClaimLifecycleSteps
}
