// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// WarrantyIDField - Field used to identify the warranty.
type WarrantyIDField string

const (
	WarrantyIDFieldID             WarrantyIDField = "id"
	WarrantyIDFieldReferenceID    WarrantyIDField = "referenceId"
	WarrantyIDFieldContractNumber WarrantyIDField = "contractNumber"
)

func (e WarrantyIDField) ToPointer() *WarrantyIDField {
	return &e
}
func (e *WarrantyIDField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "referenceId":
		fallthrough
	case "contractNumber":
		*e = WarrantyIDField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WarrantyIDField: %v", v)
	}
}

// OpenClaimCommandRequestStatus - Status of the claim.
type OpenClaimCommandRequestStatus string

const (
	OpenClaimCommandRequestStatusOpen      OpenClaimCommandRequestStatus = "OPEN"
	OpenClaimCommandRequestStatusCancelled OpenClaimCommandRequestStatus = "CANCELLED"
	OpenClaimCommandRequestStatusClosed    OpenClaimCommandRequestStatus = "CLOSED"
	OpenClaimCommandRequestStatusExpired   OpenClaimCommandRequestStatus = "EXPIRED"
)

func (e OpenClaimCommandRequestStatus) ToPointer() *OpenClaimCommandRequestStatus {
	return &e
}
func (e *OpenClaimCommandRequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CLOSED":
		fallthrough
	case "EXPIRED":
		*e = OpenClaimCommandRequestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenClaimCommandRequestStatus: %v", v)
	}
}

type OpenClaimCommandRequest struct {
	// Unique ID of the warranty.
	WarrantyUniqueID string `json:"warrantyUniqueId"`
	// Field used to identify the warranty.
	WarrantyIDField *WarrantyIDField `default:"id" json:"warrantyIdField"`
	// Date of the claim.
	ClaimDate *time.Time `json:"claimDate,omitempty"`
	// Allow creating a claim within the waiting period
	IgnoreWaitingPeriod *bool `json:"ignoreWaitingPeriod,omitempty"`
	// Allow expired and cancelled warranties
	AllowExpiredOrCancelledWarranty *bool `json:"allowExpiredOrCancelledWarranty,omitempty"`
	// User-defined reference Id.
	ReferenceID *string `json:"referenceId,omitempty"`
	// Customer complaint describing the issue they are facing.
	Complaint string `json:"complaint"`
	// Amounts tracked for the associated claim.
	Amount *AmountDto `json:"amount,omitempty"`
	// Status of the claim.
	Status *OpenClaimCommandRequestStatus `json:"status,omitempty"`
	// Reason given as to why the claim was cancelled.
	CancellationReason string `json:"cancellationReason"`
	// Claim items associated with the claim.
	Items []CreateClaimItemCommandRequest `json:"items,omitempty"`
	// Notes associated with the claim.
	Notes []CreateClaimNoteCommandRequest `json:"notes,omitempty"`
}

func (o OpenClaimCommandRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpenClaimCommandRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpenClaimCommandRequest) GetWarrantyUniqueID() string {
	if o == nil {
		return ""
	}
	return o.WarrantyUniqueID
}

func (o *OpenClaimCommandRequest) GetWarrantyIDField() *WarrantyIDField {
	if o == nil {
		return nil
	}
	return o.WarrantyIDField
}

func (o *OpenClaimCommandRequest) GetClaimDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClaimDate
}

func (o *OpenClaimCommandRequest) GetIgnoreWaitingPeriod() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreWaitingPeriod
}

func (o *OpenClaimCommandRequest) GetAllowExpiredOrCancelledWarranty() *bool {
	if o == nil {
		return nil
	}
	return o.AllowExpiredOrCancelledWarranty
}

func (o *OpenClaimCommandRequest) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *OpenClaimCommandRequest) GetComplaint() string {
	if o == nil {
		return ""
	}
	return o.Complaint
}

func (o *OpenClaimCommandRequest) GetAmount() *AmountDto {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OpenClaimCommandRequest) GetStatus() *OpenClaimCommandRequestStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OpenClaimCommandRequest) GetCancellationReason() string {
	if o == nil {
		return ""
	}
	return o.CancellationReason
}

func (o *OpenClaimCommandRequest) GetItems() []CreateClaimItemCommandRequest {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *OpenClaimCommandRequest) GetNotes() []CreateClaimNoteCommandRequest {
	if o == nil {
		return nil
	}
	return o.Notes
}
