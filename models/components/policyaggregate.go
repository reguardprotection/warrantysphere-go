// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// SucceededBy - Linked policy succeeding this one.
type SucceededBy struct {
}

// PolicyAggregateStatus - Current status of the policy.
type PolicyAggregateStatus string

const (
	PolicyAggregateStatusDraft     PolicyAggregateStatus = "DRAFT"
	PolicyAggregateStatusPublished PolicyAggregateStatus = "PUBLISHED"
	PolicyAggregateStatusArchived  PolicyAggregateStatus = "ARCHIVED"
	PolicyAggregateStatusRunoff    PolicyAggregateStatus = "RUNOFF"
)

func (e PolicyAggregateStatus) ToPointer() *PolicyAggregateStatus {
	return &e
}
func (e *PolicyAggregateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PUBLISHED":
		fallthrough
	case "ARCHIVED":
		fallthrough
	case "RUNOFF":
		*e = PolicyAggregateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyAggregateStatus: %v", v)
	}
}

type Coverages struct {
}

type Plans struct {
}

type ClaimLifecycleSteps struct {
}

type PolicyAggregate struct {
	// Unique identifier of the policy.
	ID string `json:"id"`
	// User-defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// Datetime when the policy was created.
	Created time.Time `json:"created"`
	// Datetime when the policy was last modified.
	Modified time.Time `json:"modified"`
	// Datetime when the policy was deleted.
	Deleted       time.Time `json:"deleted"`
	PublishedDate time.Time `json:"publishedDate"`
	// Formatted unique identifier for the policy.
	PolicyNumber string `json:"policyNumber"`
	// Pointer to the policy version that comes after this one
	SucceededByID *string `json:"succeededById,omitempty"`
	// Linked policy succeeding this one.
	SucceededBy *SucceededBy `json:"succeededBy,omitempty"`
	// Descriptive title of the policy. Used in the Customer Portal application.
	Title string `json:"title"`
	// Friendly title of the policy. Used in policy checkout.
	FriendlyTitle string `json:"friendlyTitle"`
	// Displayed to customers and distributors when selecting a policy at checkout.
	Icon string `json:"icon"`
	// A tagline that provides a brief description of the policy.
	Tagline string `json:"tagline"`
	// A description that provides a detailed description of the policy.
	Description string `json:"description"`
	// Text rule for the validity period of the provisioned warranties.
	Validity string `json:"validity"`
	// Current status of the policy.
	Status *PolicyAggregateStatus `default:"DRAFT" json:"status"`
	// The unique identifier of the property set
	PropertySetID string               `json:"propertySetId"`
	PropertySet   PropertySetAggregate `json:"propertySet"`
	// Duration (in days) until a customer can make a claim for this policy.
	ClaimWaitingPeriod float64 `json:"claimWaitingPeriod"`
	// Unique identifier for the linked Terms & Conditions document for this policy.
	TermsAndConditionsID string `json:"termsAndConditionsId"`
	// Linked Terms & Conditions document for this policy.
	TermsAndConditions *PolicyDocumentAggregate `json:"termsAndConditions,omitempty"`
	// Unique identifier for the linked Coverage Summary document for this policy.
	CoverageSummaryID string `json:"coverageSummaryId"`
	// Linked Coverage Summary document for this policy.
	CoverageSummary *PolicyDocumentAggregate `json:"coverageSummary,omitempty"`
	// Number of hours the warranty provisioned email is delayed.
	WelcomeEmailDelayHours float64 `json:"welcomeEmailDelayHours"`
	// Coverages included in the policy.
	Coverages [][]Coverages `json:"coverages,omitempty"`
	// Emails included in the policy.
	Emails []PolicyEmailAggregate `json:"emails,omitempty"`
	// Cancelation rules for the policy.
	CancelationRules []string `json:"cancelationRules,omitempty"`
	// Plans included in the policy.
	Plans [][]Plans `json:"plans,omitempty"`
	// The claim lifecycle steps used for this policy.
	ClaimLifecycleSteps [][]ClaimLifecycleSteps `json:"claimLifecycleSteps,omitempty"`
	// Allowed durations and payment schedules for this policy.
	Terms []PolicyTerm `json:"terms"`
	// Whether or not provisioned warranties require manual activation from the customer.
	RequiresWarrantyActivation *bool `default:"false" json:"requiresWarrantyActivation"`
}

func (p PolicyAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PolicyAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PolicyAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PolicyAggregate) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *PolicyAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *PolicyAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *PolicyAggregate) GetDeleted() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Deleted
}

func (o *PolicyAggregate) GetPublishedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.PublishedDate
}

func (o *PolicyAggregate) GetPolicyNumber() string {
	if o == nil {
		return ""
	}
	return o.PolicyNumber
}

func (o *PolicyAggregate) GetSucceededByID() *string {
	if o == nil {
		return nil
	}
	return o.SucceededByID
}

func (o *PolicyAggregate) GetSucceededBy() *SucceededBy {
	if o == nil {
		return nil
	}
	return o.SucceededBy
}

func (o *PolicyAggregate) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *PolicyAggregate) GetFriendlyTitle() string {
	if o == nil {
		return ""
	}
	return o.FriendlyTitle
}

func (o *PolicyAggregate) GetIcon() string {
	if o == nil {
		return ""
	}
	return o.Icon
}

func (o *PolicyAggregate) GetTagline() string {
	if o == nil {
		return ""
	}
	return o.Tagline
}

func (o *PolicyAggregate) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *PolicyAggregate) GetValidity() string {
	if o == nil {
		return ""
	}
	return o.Validity
}

func (o *PolicyAggregate) GetStatus() *PolicyAggregateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PolicyAggregate) GetPropertySetID() string {
	if o == nil {
		return ""
	}
	return o.PropertySetID
}

func (o *PolicyAggregate) GetPropertySet() PropertySetAggregate {
	if o == nil {
		return PropertySetAggregate{}
	}
	return o.PropertySet
}

func (o *PolicyAggregate) GetClaimWaitingPeriod() float64 {
	if o == nil {
		return 0.0
	}
	return o.ClaimWaitingPeriod
}

func (o *PolicyAggregate) GetTermsAndConditionsID() string {
	if o == nil {
		return ""
	}
	return o.TermsAndConditionsID
}

func (o *PolicyAggregate) GetTermsAndConditions() *PolicyDocumentAggregate {
	if o == nil {
		return nil
	}
	return o.TermsAndConditions
}

func (o *PolicyAggregate) GetCoverageSummaryID() string {
	if o == nil {
		return ""
	}
	return o.CoverageSummaryID
}

func (o *PolicyAggregate) GetCoverageSummary() *PolicyDocumentAggregate {
	if o == nil {
		return nil
	}
	return o.CoverageSummary
}

func (o *PolicyAggregate) GetWelcomeEmailDelayHours() float64 {
	if o == nil {
		return 0.0
	}
	return o.WelcomeEmailDelayHours
}

func (o *PolicyAggregate) GetCoverages() [][]Coverages {
	if o == nil {
		return nil
	}
	return o.Coverages
}

func (o *PolicyAggregate) GetEmails() []PolicyEmailAggregate {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PolicyAggregate) GetCancelationRules() []string {
	if o == nil {
		return nil
	}
	return o.CancelationRules
}

func (o *PolicyAggregate) GetPlans() [][]Plans {
	if o == nil {
		return nil
	}
	return o.Plans
}

func (o *PolicyAggregate) GetClaimLifecycleSteps() [][]ClaimLifecycleSteps {
	if o == nil {
		return nil
	}
	return o.ClaimLifecycleSteps
}

func (o *PolicyAggregate) GetTerms() []PolicyTerm {
	if o == nil {
		return []PolicyTerm{}
	}
	return o.Terms
}

func (o *PolicyAggregate) GetRequiresWarrantyActivation() *bool {
	if o == nil {
		return nil
	}
	return o.RequiresWarrantyActivation
}
