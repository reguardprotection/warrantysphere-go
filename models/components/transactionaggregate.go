// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// TransactionAggregateStatus - Transaction status
type TransactionAggregateStatus string

const (
	TransactionAggregateStatusVoided    TransactionAggregateStatus = "VOIDED"
	TransactionAggregateStatusPending   TransactionAggregateStatus = "PENDING"
	TransactionAggregateStatusFinalized TransactionAggregateStatus = "FINALIZED"
)

func (e TransactionAggregateStatus) ToPointer() *TransactionAggregateStatus {
	return &e
}
func (e *TransactionAggregateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VOIDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "FINALIZED":
		*e = TransactionAggregateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionAggregateStatus: %v", v)
	}
}

// TransactionAggregateSourceAccountStatus - Activation status of the distributor.
type TransactionAggregateSourceAccountStatus struct {
}

// TransactionAggregateDistributor - Distributor that is linked to the account
type TransactionAggregateDistributor struct {
	// Unique identifier of the distributor
	ID string `json:"id"`
	// User-defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// Datetime when the distributor was created.
	Created time.Time `json:"created"`
	// Datetime when the distributor was last modified.
	Modified time.Time `json:"modified"`
	Name     string    `json:"name"`
	Email    *string   `json:"email"`
	Phone    *string   `json:"phone"`
	// Activation status of the distributor.
	Status TransactionAggregateSourceAccountStatus `json:"status"`
	// Parent distributor of this distributor.
	Parent *DistributorAggregate `json:"parent,omitempty"`
	// Unique identifier of the parent distributor of the distributor.
	ParentID *string `json:"parentId"`
	// The computed permission key based off of the parent.
	PermissionKey string `json:"permissionKey"`
	// Parent distributor of this distributor.
	OnboardingLink *DistributorOnboardingLinkAggregate `json:"onboardingLink,omitempty"`
	// Unique identifier of the parent distributor of the distributor.
	OnboardingLinkID *string `json:"onboardingLinkId"`
	// Activation date of the Distributor.
	ActivatedDate time.Time `json:"activatedDate"`
	// Deactivation date of the Distributor.
	DeactivatedDate time.Time `json:"deactivatedDate"`
	// Archived date of the Distributor.
	ArchivedDate time.Time `json:"archivedDate"`
}

func (t TransactionAggregateDistributor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionAggregateDistributor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionAggregateDistributor) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionAggregateDistributor) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *TransactionAggregateDistributor) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TransactionAggregateDistributor) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *TransactionAggregateDistributor) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateDistributor) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *TransactionAggregateDistributor) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *TransactionAggregateDistributor) GetStatus() TransactionAggregateSourceAccountStatus {
	if o == nil {
		return TransactionAggregateSourceAccountStatus{}
	}
	return o.Status
}

func (o *TransactionAggregateDistributor) GetParent() *DistributorAggregate {
	if o == nil {
		return nil
	}
	return o.Parent
}

func (o *TransactionAggregateDistributor) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *TransactionAggregateDistributor) GetPermissionKey() string {
	if o == nil {
		return ""
	}
	return o.PermissionKey
}

func (o *TransactionAggregateDistributor) GetOnboardingLink() *DistributorOnboardingLinkAggregate {
	if o == nil {
		return nil
	}
	return o.OnboardingLink
}

func (o *TransactionAggregateDistributor) GetOnboardingLinkID() *string {
	if o == nil {
		return nil
	}
	return o.OnboardingLinkID
}

func (o *TransactionAggregateDistributor) GetActivatedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ActivatedDate
}

func (o *TransactionAggregateDistributor) GetDeactivatedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DeactivatedDate
}

func (o *TransactionAggregateDistributor) GetArchivedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ArchivedDate
}

// TransactionAggregateSourceAccountAddress - Shipping address of the customer
type TransactionAggregateSourceAccountAddress struct {
	Line1   string  `json:"line1"`
	Line2   *string `json:"line2"`
	Zip     string  `json:"zip"`
	City    string  `json:"city"`
	State   string  `json:"state"`
	Country string  `json:"country"`
}

func (o *TransactionAggregateSourceAccountAddress) GetLine1() string {
	if o == nil {
		return ""
	}
	return o.Line1
}

func (o *TransactionAggregateSourceAccountAddress) GetLine2() *string {
	if o == nil {
		return nil
	}
	return o.Line2
}

func (o *TransactionAggregateSourceAccountAddress) GetZip() string {
	if o == nil {
		return ""
	}
	return o.Zip
}

func (o *TransactionAggregateSourceAccountAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *TransactionAggregateSourceAccountAddress) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

func (o *TransactionAggregateSourceAccountAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

// TransactionAggregateCustomer - Customer that is linked to the account
type TransactionAggregateCustomer struct {
	// Unique identifier for the customer.
	ID string `json:"id"`
	// User-defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// The customer's full name.
	Name string `json:"name"`
	// The customer's email address.
	Email string `json:"email"`
	// The customer's phone number.
	Phone *string `json:"phone"`
	// Unique identifier for the user.
	UserID string `json:"userId"`
	// User linked to the customer.
	User *UserAggregate `json:"user,omitempty"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Shipping address of the customer
	Address *TransactionAggregateSourceAccountAddress `json:"address"`
	// JSON object of metadata related to the customer.
	Metadata *string `json:"metadata"`
}

func (t TransactionAggregateCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionAggregateCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionAggregateCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionAggregateCustomer) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *TransactionAggregateCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateCustomer) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TransactionAggregateCustomer) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *TransactionAggregateCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *TransactionAggregateCustomer) GetUser() *UserAggregate {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *TransactionAggregateCustomer) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TransactionAggregateCustomer) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *TransactionAggregateCustomer) GetAddress() *TransactionAggregateSourceAccountAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *TransactionAggregateCustomer) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type BusinessOwnerAggregateOwnerType string

const (
	BusinessOwnerAggregateOwnerTypeBusiness BusinessOwnerAggregateOwnerType = "BUSINESS"
)

func (e BusinessOwnerAggregateOwnerType) ToPointer() *BusinessOwnerAggregateOwnerType {
	return &e
}
func (e *BusinessOwnerAggregateOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUSINESS":
		*e = BusinessOwnerAggregateOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BusinessOwnerAggregateOwnerType: %v", v)
	}
}

type OwnerBusinessOwnerAggregate struct {
	Type BusinessOwnerAggregateOwnerType `json:"type"`
	// Name of the account owner
	Name string `json:"name"`
	// Email address of the account owner
	Email string `json:"email"`
	// Phone number of the account owner
	Phone *string `json:"phone"`
	// Business type of the account owner
	BusinessType *string `json:"businessType"`
	// Physical address of the account owner's business
	Address AddressAggregate `json:"address"`
}

func (o *OwnerBusinessOwnerAggregate) GetType() BusinessOwnerAggregateOwnerType {
	if o == nil {
		return BusinessOwnerAggregateOwnerType("")
	}
	return o.Type
}

func (o *OwnerBusinessOwnerAggregate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OwnerBusinessOwnerAggregate) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *OwnerBusinessOwnerAggregate) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *OwnerBusinessOwnerAggregate) GetBusinessType() *string {
	if o == nil {
		return nil
	}
	return o.BusinessType
}

func (o *OwnerBusinessOwnerAggregate) GetAddress() AddressAggregate {
	if o == nil {
		return AddressAggregate{}
	}
	return o.Address
}

type IndividualOwnerAggregateOwnerTransactionAggregateType string

const (
	IndividualOwnerAggregateOwnerTransactionAggregateTypeIndividual IndividualOwnerAggregateOwnerTransactionAggregateType = "INDIVIDUAL"
)

func (e IndividualOwnerAggregateOwnerTransactionAggregateType) ToPointer() *IndividualOwnerAggregateOwnerTransactionAggregateType {
	return &e
}
func (e *IndividualOwnerAggregateOwnerTransactionAggregateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INDIVIDUAL":
		*e = IndividualOwnerAggregateOwnerTransactionAggregateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualOwnerAggregateOwnerTransactionAggregateType: %v", v)
	}
}

type OwnerIndividualOwnerAggregate struct {
	Type IndividualOwnerAggregateOwnerTransactionAggregateType `json:"type"`
	// Name of the account owner
	Name string `json:"name"`
	// Email address of the account owner
	Email string `json:"email"`
	// Phone number of the account owner
	Phone *string `json:"phone"`
}

func (o *OwnerIndividualOwnerAggregate) GetType() IndividualOwnerAggregateOwnerTransactionAggregateType {
	if o == nil {
		return IndividualOwnerAggregateOwnerTransactionAggregateType("")
	}
	return o.Type
}

func (o *OwnerIndividualOwnerAggregate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OwnerIndividualOwnerAggregate) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *OwnerIndividualOwnerAggregate) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

type TransactionAggregateOwnerType string

const (
	TransactionAggregateOwnerTypeOwnerIndividualOwnerAggregate TransactionAggregateOwnerType = "owner_IndividualOwnerAggregate"
	TransactionAggregateOwnerTypeOwnerBusinessOwnerAggregate   TransactionAggregateOwnerType = "owner_BusinessOwnerAggregate"
)

// TransactionAggregateOwner - Account owner information
type TransactionAggregateOwner struct {
	OwnerIndividualOwnerAggregate *OwnerIndividualOwnerAggregate
	OwnerBusinessOwnerAggregate   *OwnerBusinessOwnerAggregate

	Type TransactionAggregateOwnerType
}

func CreateTransactionAggregateOwnerOwnerIndividualOwnerAggregate(ownerIndividualOwnerAggregate OwnerIndividualOwnerAggregate) TransactionAggregateOwner {
	typ := TransactionAggregateOwnerTypeOwnerIndividualOwnerAggregate

	return TransactionAggregateOwner{
		OwnerIndividualOwnerAggregate: &ownerIndividualOwnerAggregate,
		Type:                          typ,
	}
}

func CreateTransactionAggregateOwnerOwnerBusinessOwnerAggregate(ownerBusinessOwnerAggregate OwnerBusinessOwnerAggregate) TransactionAggregateOwner {
	typ := TransactionAggregateOwnerTypeOwnerBusinessOwnerAggregate

	return TransactionAggregateOwner{
		OwnerBusinessOwnerAggregate: &ownerBusinessOwnerAggregate,
		Type:                        typ,
	}
}

func (u *TransactionAggregateOwner) UnmarshalJSON(data []byte) error {

	var ownerIndividualOwnerAggregate OwnerIndividualOwnerAggregate = OwnerIndividualOwnerAggregate{}
	if err := utils.UnmarshalJSON(data, &ownerIndividualOwnerAggregate, "", true, true); err == nil {
		u.OwnerIndividualOwnerAggregate = &ownerIndividualOwnerAggregate
		u.Type = TransactionAggregateOwnerTypeOwnerIndividualOwnerAggregate
		return nil
	}

	var ownerBusinessOwnerAggregate OwnerBusinessOwnerAggregate = OwnerBusinessOwnerAggregate{}
	if err := utils.UnmarshalJSON(data, &ownerBusinessOwnerAggregate, "", true, true); err == nil {
		u.OwnerBusinessOwnerAggregate = &ownerBusinessOwnerAggregate
		u.Type = TransactionAggregateOwnerTypeOwnerBusinessOwnerAggregate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TransactionAggregateOwner", string(data))
}

func (u TransactionAggregateOwner) MarshalJSON() ([]byte, error) {
	if u.OwnerIndividualOwnerAggregate != nil {
		return utils.MarshalJSON(u.OwnerIndividualOwnerAggregate, "", true)
	}

	if u.OwnerBusinessOwnerAggregate != nil {
		return utils.MarshalJSON(u.OwnerBusinessOwnerAggregate, "", true)
	}

	return nil, errors.New("could not marshal union type TransactionAggregateOwner: all fields are null")
}

// SourceAccount - Source account
type SourceAccount struct {
	// Unique identifier for the account.
	ID string `json:"id"`
	// Account name
	Name string `json:"name"`
	// Account description
	Description *string `json:"description"`
	// Account currency
	Currency string `json:"currency"`
	// Unique ID of a distributor that is linked to the account
	DistributorID *string `json:"distributorId"`
	// Distributor that is linked to the account
	Distributor *TransactionAggregateDistributor `json:"distributor,omitempty"`
	// Unique ID of a customer that is linked to the account
	CustomerID *string `json:"customerId"`
	// Customer that is linked to the account
	Customer *TransactionAggregateCustomer `json:"customer,omitempty"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Account owner information
	Owner *TransactionAggregateOwner `json:"owner"`
}

func (s SourceAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SourceAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceAccount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SourceAccount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *SourceAccount) GetDistributorID() *string {
	if o == nil {
		return nil
	}
	return o.DistributorID
}

func (o *SourceAccount) GetDistributor() *TransactionAggregateDistributor {
	if o == nil {
		return nil
	}
	return o.Distributor
}

func (o *SourceAccount) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *SourceAccount) GetCustomer() *TransactionAggregateCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *SourceAccount) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *SourceAccount) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *SourceAccount) GetOwner() *TransactionAggregateOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

// TransactionAggregateDestinationAccountStatus - Activation status of the distributor.
type TransactionAggregateDestinationAccountStatus struct {
}

// TransactionAggregateDestinationAccountDistributor - Distributor that is linked to the account
type TransactionAggregateDestinationAccountDistributor struct {
	// Unique identifier of the distributor
	ID string `json:"id"`
	// User-defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// Datetime when the distributor was created.
	Created time.Time `json:"created"`
	// Datetime when the distributor was last modified.
	Modified time.Time `json:"modified"`
	Name     string    `json:"name"`
	Email    *string   `json:"email"`
	Phone    *string   `json:"phone"`
	// Activation status of the distributor.
	Status TransactionAggregateDestinationAccountStatus `json:"status"`
	// Parent distributor of this distributor.
	Parent *DistributorAggregate `json:"parent,omitempty"`
	// Unique identifier of the parent distributor of the distributor.
	ParentID *string `json:"parentId"`
	// The computed permission key based off of the parent.
	PermissionKey string `json:"permissionKey"`
	// Parent distributor of this distributor.
	OnboardingLink *DistributorOnboardingLinkAggregate `json:"onboardingLink,omitempty"`
	// Unique identifier of the parent distributor of the distributor.
	OnboardingLinkID *string `json:"onboardingLinkId"`
	// Activation date of the Distributor.
	ActivatedDate time.Time `json:"activatedDate"`
	// Deactivation date of the Distributor.
	DeactivatedDate time.Time `json:"deactivatedDate"`
	// Archived date of the Distributor.
	ArchivedDate time.Time `json:"archivedDate"`
}

func (t TransactionAggregateDestinationAccountDistributor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionAggregateDestinationAccountDistributor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionAggregateDestinationAccountDistributor) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionAggregateDestinationAccountDistributor) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *TransactionAggregateDestinationAccountDistributor) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TransactionAggregateDestinationAccountDistributor) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *TransactionAggregateDestinationAccountDistributor) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateDestinationAccountDistributor) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *TransactionAggregateDestinationAccountDistributor) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *TransactionAggregateDestinationAccountDistributor) GetStatus() TransactionAggregateDestinationAccountStatus {
	if o == nil {
		return TransactionAggregateDestinationAccountStatus{}
	}
	return o.Status
}

func (o *TransactionAggregateDestinationAccountDistributor) GetParent() *DistributorAggregate {
	if o == nil {
		return nil
	}
	return o.Parent
}

func (o *TransactionAggregateDestinationAccountDistributor) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *TransactionAggregateDestinationAccountDistributor) GetPermissionKey() string {
	if o == nil {
		return ""
	}
	return o.PermissionKey
}

func (o *TransactionAggregateDestinationAccountDistributor) GetOnboardingLink() *DistributorOnboardingLinkAggregate {
	if o == nil {
		return nil
	}
	return o.OnboardingLink
}

func (o *TransactionAggregateDestinationAccountDistributor) GetOnboardingLinkID() *string {
	if o == nil {
		return nil
	}
	return o.OnboardingLinkID
}

func (o *TransactionAggregateDestinationAccountDistributor) GetActivatedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ActivatedDate
}

func (o *TransactionAggregateDestinationAccountDistributor) GetDeactivatedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DeactivatedDate
}

func (o *TransactionAggregateDestinationAccountDistributor) GetArchivedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ArchivedDate
}

// TransactionAggregateDestinationAccountAddress - Shipping address of the customer
type TransactionAggregateDestinationAccountAddress struct {
	Line1   string  `json:"line1"`
	Line2   *string `json:"line2"`
	Zip     string  `json:"zip"`
	City    string  `json:"city"`
	State   string  `json:"state"`
	Country string  `json:"country"`
}

func (o *TransactionAggregateDestinationAccountAddress) GetLine1() string {
	if o == nil {
		return ""
	}
	return o.Line1
}

func (o *TransactionAggregateDestinationAccountAddress) GetLine2() *string {
	if o == nil {
		return nil
	}
	return o.Line2
}

func (o *TransactionAggregateDestinationAccountAddress) GetZip() string {
	if o == nil {
		return ""
	}
	return o.Zip
}

func (o *TransactionAggregateDestinationAccountAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *TransactionAggregateDestinationAccountAddress) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

func (o *TransactionAggregateDestinationAccountAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

// TransactionAggregateDestinationAccountCustomer - Customer that is linked to the account
type TransactionAggregateDestinationAccountCustomer struct {
	// Unique identifier for the customer.
	ID string `json:"id"`
	// User-defined reference ID.
	ReferenceID *string `json:"referenceId"`
	// The customer's full name.
	Name string `json:"name"`
	// The customer's email address.
	Email string `json:"email"`
	// The customer's phone number.
	Phone *string `json:"phone"`
	// Unique identifier for the user.
	UserID string `json:"userId"`
	// User linked to the customer.
	User *UserAggregate `json:"user,omitempty"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Shipping address of the customer
	Address *TransactionAggregateDestinationAccountAddress `json:"address"`
	// JSON object of metadata related to the customer.
	Metadata *string `json:"metadata"`
}

func (t TransactionAggregateDestinationAccountCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionAggregateDestinationAccountCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionAggregateDestinationAccountCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionAggregateDestinationAccountCustomer) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *TransactionAggregateDestinationAccountCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateDestinationAccountCustomer) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TransactionAggregateDestinationAccountCustomer) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *TransactionAggregateDestinationAccountCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *TransactionAggregateDestinationAccountCustomer) GetUser() *UserAggregate {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *TransactionAggregateDestinationAccountCustomer) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TransactionAggregateDestinationAccountCustomer) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *TransactionAggregateDestinationAccountCustomer) GetAddress() *TransactionAggregateDestinationAccountAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *TransactionAggregateDestinationAccountCustomer) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type BusinessOwnerAggregateOwnerTransactionAggregateType string

const (
	BusinessOwnerAggregateOwnerTransactionAggregateTypeBusiness BusinessOwnerAggregateOwnerTransactionAggregateType = "BUSINESS"
)

func (e BusinessOwnerAggregateOwnerTransactionAggregateType) ToPointer() *BusinessOwnerAggregateOwnerTransactionAggregateType {
	return &e
}
func (e *BusinessOwnerAggregateOwnerTransactionAggregateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUSINESS":
		*e = BusinessOwnerAggregateOwnerTransactionAggregateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BusinessOwnerAggregateOwnerTransactionAggregateType: %v", v)
	}
}

type TransactionAggregateOwnerBusinessOwnerAggregate struct {
	Type BusinessOwnerAggregateOwnerTransactionAggregateType `json:"type"`
	// Name of the account owner
	Name string `json:"name"`
	// Email address of the account owner
	Email string `json:"email"`
	// Phone number of the account owner
	Phone *string `json:"phone"`
	// Business type of the account owner
	BusinessType *string `json:"businessType"`
	// Physical address of the account owner's business
	Address AddressAggregate `json:"address"`
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetType() BusinessOwnerAggregateOwnerTransactionAggregateType {
	if o == nil {
		return BusinessOwnerAggregateOwnerTransactionAggregateType("")
	}
	return o.Type
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetBusinessType() *string {
	if o == nil {
		return nil
	}
	return o.BusinessType
}

func (o *TransactionAggregateOwnerBusinessOwnerAggregate) GetAddress() AddressAggregate {
	if o == nil {
		return AddressAggregate{}
	}
	return o.Address
}

type IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType string

const (
	IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountTypeIndividual IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType = "INDIVIDUAL"
)

func (e IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType) ToPointer() *IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType {
	return &e
}
func (e *IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INDIVIDUAL":
		*e = IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType: %v", v)
	}
}

type TransactionAggregateOwnerIndividualOwnerAggregate struct {
	Type IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType `json:"type"`
	// Name of the account owner
	Name string `json:"name"`
	// Email address of the account owner
	Email string `json:"email"`
	// Phone number of the account owner
	Phone *string `json:"phone"`
}

func (o *TransactionAggregateOwnerIndividualOwnerAggregate) GetType() IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType {
	if o == nil {
		return IndividualOwnerAggregateOwnerTransactionAggregateDestinationAccountType("")
	}
	return o.Type
}

func (o *TransactionAggregateOwnerIndividualOwnerAggregate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TransactionAggregateOwnerIndividualOwnerAggregate) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TransactionAggregateOwnerIndividualOwnerAggregate) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

type TransactionAggregateDestinationAccountOwnerType string

const (
	TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerIndividualOwnerAggregate TransactionAggregateDestinationAccountOwnerType = "TransactionAggregate_owner_IndividualOwnerAggregate"
	TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerBusinessOwnerAggregate   TransactionAggregateDestinationAccountOwnerType = "TransactionAggregate_owner_BusinessOwnerAggregate"
)

// TransactionAggregateDestinationAccountOwner - Account owner information
type TransactionAggregateDestinationAccountOwner struct {
	TransactionAggregateOwnerIndividualOwnerAggregate *TransactionAggregateOwnerIndividualOwnerAggregate
	TransactionAggregateOwnerBusinessOwnerAggregate   *TransactionAggregateOwnerBusinessOwnerAggregate

	Type TransactionAggregateDestinationAccountOwnerType
}

func CreateTransactionAggregateDestinationAccountOwnerTransactionAggregateOwnerIndividualOwnerAggregate(transactionAggregateOwnerIndividualOwnerAggregate TransactionAggregateOwnerIndividualOwnerAggregate) TransactionAggregateDestinationAccountOwner {
	typ := TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerIndividualOwnerAggregate

	return TransactionAggregateDestinationAccountOwner{
		TransactionAggregateOwnerIndividualOwnerAggregate: &transactionAggregateOwnerIndividualOwnerAggregate,
		Type: typ,
	}
}

func CreateTransactionAggregateDestinationAccountOwnerTransactionAggregateOwnerBusinessOwnerAggregate(transactionAggregateOwnerBusinessOwnerAggregate TransactionAggregateOwnerBusinessOwnerAggregate) TransactionAggregateDestinationAccountOwner {
	typ := TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerBusinessOwnerAggregate

	return TransactionAggregateDestinationAccountOwner{
		TransactionAggregateOwnerBusinessOwnerAggregate: &transactionAggregateOwnerBusinessOwnerAggregate,
		Type: typ,
	}
}

func (u *TransactionAggregateDestinationAccountOwner) UnmarshalJSON(data []byte) error {

	var transactionAggregateOwnerIndividualOwnerAggregate TransactionAggregateOwnerIndividualOwnerAggregate = TransactionAggregateOwnerIndividualOwnerAggregate{}
	if err := utils.UnmarshalJSON(data, &transactionAggregateOwnerIndividualOwnerAggregate, "", true, true); err == nil {
		u.TransactionAggregateOwnerIndividualOwnerAggregate = &transactionAggregateOwnerIndividualOwnerAggregate
		u.Type = TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerIndividualOwnerAggregate
		return nil
	}

	var transactionAggregateOwnerBusinessOwnerAggregate TransactionAggregateOwnerBusinessOwnerAggregate = TransactionAggregateOwnerBusinessOwnerAggregate{}
	if err := utils.UnmarshalJSON(data, &transactionAggregateOwnerBusinessOwnerAggregate, "", true, true); err == nil {
		u.TransactionAggregateOwnerBusinessOwnerAggregate = &transactionAggregateOwnerBusinessOwnerAggregate
		u.Type = TransactionAggregateDestinationAccountOwnerTypeTransactionAggregateOwnerBusinessOwnerAggregate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TransactionAggregateDestinationAccountOwner", string(data))
}

func (u TransactionAggregateDestinationAccountOwner) MarshalJSON() ([]byte, error) {
	if u.TransactionAggregateOwnerIndividualOwnerAggregate != nil {
		return utils.MarshalJSON(u.TransactionAggregateOwnerIndividualOwnerAggregate, "", true)
	}

	if u.TransactionAggregateOwnerBusinessOwnerAggregate != nil {
		return utils.MarshalJSON(u.TransactionAggregateOwnerBusinessOwnerAggregate, "", true)
	}

	return nil, errors.New("could not marshal union type TransactionAggregateDestinationAccountOwner: all fields are null")
}

// DestinationAccount - Destination account
type DestinationAccount struct {
	// Unique identifier for the account.
	ID string `json:"id"`
	// Account name
	Name string `json:"name"`
	// Account description
	Description *string `json:"description"`
	// Account currency
	Currency string `json:"currency"`
	// Unique ID of a distributor that is linked to the account
	DistributorID *string `json:"distributorId"`
	// Distributor that is linked to the account
	Distributor *TransactionAggregateDestinationAccountDistributor `json:"distributor,omitempty"`
	// Unique ID of a customer that is linked to the account
	CustomerID *string `json:"customerId"`
	// Customer that is linked to the account
	Customer *TransactionAggregateDestinationAccountCustomer `json:"customer,omitempty"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Account owner information
	Owner *TransactionAggregateDestinationAccountOwner `json:"owner"`
}

func (d DestinationAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DestinationAccount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DestinationAccount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *DestinationAccount) GetDistributorID() *string {
	if o == nil {
		return nil
	}
	return o.DistributorID
}

func (o *DestinationAccount) GetDistributor() *TransactionAggregateDestinationAccountDistributor {
	if o == nil {
		return nil
	}
	return o.Distributor
}

func (o *DestinationAccount) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *DestinationAccount) GetCustomer() *TransactionAggregateDestinationAccountCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *DestinationAccount) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *DestinationAccount) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *DestinationAccount) GetOwner() *TransactionAggregateDestinationAccountOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

type TransactionAggregateAddress struct {
}

// CreatedBy - User that created the transaction
type CreatedBy struct {
	// Unique identifier for the user.
	ID string `json:"id"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified      time.Time                    `json:"modified"`
	Email         string                       `json:"email"`
	EmailVerified *bool                        `default:"false" json:"emailVerified"`
	PhoneNumber   *string                      `default:"null" json:"phoneNumber"`
	DisplayName   string                       `json:"displayName"`
	FriendlyName  *string                      `default:"null" json:"friendlyName"`
	PhotoURL      *string                      `default:"null" json:"photoURL"`
	Address       *TransactionAggregateAddress `json:"address"`
	Birthday      *time.Time                   `default:"null" json:"birthday"`
	LastSignedIn  *time.Time                   `default:"null" json:"lastSignedIn"`
}

func (c CreatedBy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatedBy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatedBy) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatedBy) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *CreatedBy) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *CreatedBy) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreatedBy) GetEmailVerified() *bool {
	if o == nil {
		return nil
	}
	return o.EmailVerified
}

func (o *CreatedBy) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *CreatedBy) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *CreatedBy) GetFriendlyName() *string {
	if o == nil {
		return nil
	}
	return o.FriendlyName
}

func (o *CreatedBy) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *CreatedBy) GetAddress() *TransactionAggregateAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *CreatedBy) GetBirthday() *time.Time {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *CreatedBy) GetLastSignedIn() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSignedIn
}

type TransactionAggregate struct {
	// Unique identifier for the transaction.
	ID string `json:"id"`
	// Transaction name
	Title string `json:"title"`
	// Transaction description
	Description *string `json:"description"`
	// Transaction status
	Status TransactionAggregateStatus `json:"status"`
	// Unique ID of the source account related to transaction
	SourceAccountID *string `json:"sourceAccountId"`
	// Source account
	SourceAccount *SourceAccount `json:"sourceAccount,omitempty"`
	// Unique ID of the destination account related to transaction
	DestinationAccountID *string `json:"destinationAccountId"`
	// Destination account
	DestinationAccount *DestinationAccount `json:"destinationAccount,omitempty"`
	// Unique ID of corelation context of the transaction
	CorrelationID *string `json:"correlationId"`
	// Amount of funds transferred in transaction  (default:"USD")
	Amount float64 `json:"amount"`
	// Unique ID of a user that created the transaction
	CreatedByID *string `json:"createdById"`
	// User that created the transaction
	CreatedBy *CreatedBy `json:"createdBy,omitempty"`
	// Date when the transaction was done, sets the order for finalization
	TransactionDate time.Time `json:"transactionDate"`
	// Date when the transaction was finalized
	FinalizedDate *time.Time `json:"finalizedDate"`
	// Date when the transaction was voided
	VoidedDate *time.Time `json:"voidedDate"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
}

func (t TransactionAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionAggregate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionAggregate) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TransactionAggregate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TransactionAggregate) GetStatus() TransactionAggregateStatus {
	if o == nil {
		return TransactionAggregateStatus("")
	}
	return o.Status
}

func (o *TransactionAggregate) GetSourceAccountID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountID
}

func (o *TransactionAggregate) GetSourceAccount() *SourceAccount {
	if o == nil {
		return nil
	}
	return o.SourceAccount
}

func (o *TransactionAggregate) GetDestinationAccountID() *string {
	if o == nil {
		return nil
	}
	return o.DestinationAccountID
}

func (o *TransactionAggregate) GetDestinationAccount() *DestinationAccount {
	if o == nil {
		return nil
	}
	return o.DestinationAccount
}

func (o *TransactionAggregate) GetCorrelationID() *string {
	if o == nil {
		return nil
	}
	return o.CorrelationID
}

func (o *TransactionAggregate) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *TransactionAggregate) GetCreatedByID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedByID
}

func (o *TransactionAggregate) GetCreatedBy() *CreatedBy {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *TransactionAggregate) GetTransactionDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TransactionDate
}

func (o *TransactionAggregate) GetFinalizedDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.FinalizedDate
}

func (o *TransactionAggregate) GetVoidedDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.VoidedDate
}

func (o *TransactionAggregate) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *TransactionAggregate) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}
