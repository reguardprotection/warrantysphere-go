// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// From - Status of the payment before the change
type From string

const (
	FromDraft             From = "DRAFT"
	FromVoided            From = "VOIDED"
	FromPending           From = "PENDING"
	FromPaid              From = "PAID"
	FromFailed            From = "FAILED"
	FromProcessing        From = "PROCESSING"
	FromRefunded          From = "REFUNDED"
	FromPartiallyRefunded From = "PARTIALLY_REFUNDED"
	FromProcessingRefund  From = "PROCESSING_REFUND"
)

func (e From) ToPointer() *From {
	return &e
}
func (e *From) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "VOIDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "PAID":
		fallthrough
	case "FAILED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "REFUNDED":
		fallthrough
	case "PARTIALLY_REFUNDED":
		fallthrough
	case "PROCESSING_REFUND":
		*e = From(v)
		return nil
	default:
		return fmt.Errorf("invalid value for From: %v", v)
	}
}

// To - Status of the payment after the change
type To string

const (
	ToDraft             To = "DRAFT"
	ToVoided            To = "VOIDED"
	ToPending           To = "PENDING"
	ToPaid              To = "PAID"
	ToFailed            To = "FAILED"
	ToProcessing        To = "PROCESSING"
	ToRefunded          To = "REFUNDED"
	ToPartiallyRefunded To = "PARTIALLY_REFUNDED"
	ToProcessingRefund  To = "PROCESSING_REFUND"
)

func (e To) ToPointer() *To {
	return &e
}
func (e *To) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "VOIDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "PAID":
		fallthrough
	case "FAILED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "REFUNDED":
		fallthrough
	case "PARTIALLY_REFUNDED":
		fallthrough
	case "PROCESSING_REFUND":
		*e = To(v)
		return nil
	default:
		return fmt.Errorf("invalid value for To: %v", v)
	}
}

type StatusChangeAggregate struct {
	// Status of the payment before the change
	From *From `json:"from"`
	// Status of the payment after the change
	To To `json:"to"`
	// Datetime when the status change occured
	Date time.Time `json:"date"`
}

func (s StatusChangeAggregate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusChangeAggregate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StatusChangeAggregate) GetFrom() *From {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *StatusChangeAggregate) GetTo() To {
	if o == nil {
		return To("")
	}
	return o.To
}

func (o *StatusChangeAggregate) GetDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Date
}
