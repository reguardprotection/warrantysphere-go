// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// ProvisionWarrantyRequestBodyPropertyValues - JSON object of property values related to the selected policy property set. For currency, value is in cents.
//
// Conditional: Only applicable when no 'assetId' is provided.
type ProvisionWarrantyRequestBodyPropertyValues struct {
}

// ProvisionWarrantyRequestBodyMetadata - JSON object of metadata related to the warranty being provisioned.
type ProvisionWarrantyRequestBodyMetadata struct {
}

type ProvisionWarrantyRequestBody struct {
	// User defined unique identifier for the warranty.
	ReferenceID *string `json:"referenceId,omitempty"`
	// Date when the warranty's term starts.
	TermStart *time.Time `json:"termStart,omitempty"`
	// Flag to indicate if the warranty is a draft.
	Draft *bool `json:"draft,omitempty"`
	// Unique identifier of the policy for which the warranty will be provisioned.
	PolicyID string `json:"policyId"`
	// Unique identifier of the policy term for which the warranty will be provisioned.
	PolicyTermID *string `json:"policyTermId,omitempty"`
	// Unique identifier of the plan for which the warranty will be provisioned.
	PlanID string `json:"planId"`
	// Unique identifier of the payment schedule for which the warranty will be provisioned.
	//
	// Conditional: The selected policy MUST be configured with payment schedules.
	//
	// Note: If the warranrty is intended to be draft, a payment schedule can not be used.
	PaymentScheduleID *string `json:"paymentScheduleId,omitempty"`
	// List of unique addon identifiers to add to the warranty.
	AddonIds []string `json:"addonIds,omitempty"`
	// Unique identifier of the distributor for which the warranty will be provisioned.
	//
	// Conditional: Only applicable when no 'distributor' data is provided.
	DistributorID *string `json:"distributorId,omitempty"`
	// Data of the distributor for which the warranty will be provisioned.
	//
	// Conditional: Only applicable when no 'distributorId' is provided.
	Distributor *DistributorDto `json:"distributor,omitempty"`
	// Unique identifier of the customer for which the warranty will be provisioned.
	//
	// Conditional: Only applicable when no 'customer' data is provided.
	CustomerID *string `json:"customerId,omitempty"`
	// Data of the customer for which the warranty will be provisioned.
	//
	// Conditional: Only applicable when no 'customerId' is provided.
	Customer *CustomerDto `json:"customer,omitempty"`
	// Unique identifier of the payment method used for warranty payments.
	//
	// Conditional: The selected policy MUST be configured with payment schedules.
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// Unique identifier of the asset for which the warranty will be provisioned.
	AssetID *string `json:"assetId,omitempty"`
	// User defined unique identifier for the asset.
	//
	// Conditional: Only applicable when no 'assetId' is provided.
	AssetReferenceID *string `json:"assetReferenceId,omitempty"`
	// JSON object of property values related to the selected policy property set. For currency, value is in cents.
	//
	// Conditional: Only applicable when no 'assetId' is provided.
	PropertyValues ProvisionWarrantyRequestBodyPropertyValues `json:"propertyValues"`
	// Fees for each coverage on the warranty.
	Fees []WarrantyCoverageFeeDto `json:"fees,omitempty"`
	// JSON object of metadata related to the warranty being provisioned.
	Metadata *ProvisionWarrantyRequestBodyMetadata `json:"metadata,omitempty"`
	// The address used to calculate taxes.
	//
	// Conditional: Required if the policy is not configured to automatically retrieve the address.
	ShippingAddress AddressDto `json:"shippingAddress"`
	// Activate the warranty upon provisioning.
	AutoActivate *bool `json:"autoActivate,omitempty"`
	// Previously quoted subtotal of all base coverages and selected addons, excluding taxes. Used to validate the quote subtotal with the evaluated subtotal before provisioning (value is in cents).
	QuoteSubtotal *float64 `json:"quoteSubtotal,omitempty"`
	// Previously quoted total of all base coverages, selected addons, and taxes. Used to validate the quote total with the evaluated total before provisioning (value is in cents).
	QuoteTotal *float64 `json:"quoteTotal,omitempty"`
}

func (p ProvisionWarrantyRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProvisionWarrantyRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionWarrantyRequestBody) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *ProvisionWarrantyRequestBody) GetTermStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.TermStart
}

func (o *ProvisionWarrantyRequestBody) GetDraft() *bool {
	if o == nil {
		return nil
	}
	return o.Draft
}

func (o *ProvisionWarrantyRequestBody) GetPolicyID() string {
	if o == nil {
		return ""
	}
	return o.PolicyID
}

func (o *ProvisionWarrantyRequestBody) GetPolicyTermID() *string {
	if o == nil {
		return nil
	}
	return o.PolicyTermID
}

func (o *ProvisionWarrantyRequestBody) GetPlanID() string {
	if o == nil {
		return ""
	}
	return o.PlanID
}

func (o *ProvisionWarrantyRequestBody) GetPaymentScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentScheduleID
}

func (o *ProvisionWarrantyRequestBody) GetAddonIds() []string {
	if o == nil {
		return nil
	}
	return o.AddonIds
}

func (o *ProvisionWarrantyRequestBody) GetDistributorID() *string {
	if o == nil {
		return nil
	}
	return o.DistributorID
}

func (o *ProvisionWarrantyRequestBody) GetDistributor() *DistributorDto {
	if o == nil {
		return nil
	}
	return o.Distributor
}

func (o *ProvisionWarrantyRequestBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ProvisionWarrantyRequestBody) GetCustomer() *CustomerDto {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ProvisionWarrantyRequestBody) GetPaymentMethodID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodID
}

func (o *ProvisionWarrantyRequestBody) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *ProvisionWarrantyRequestBody) GetAssetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AssetReferenceID
}

func (o *ProvisionWarrantyRequestBody) GetPropertyValues() ProvisionWarrantyRequestBodyPropertyValues {
	if o == nil {
		return ProvisionWarrantyRequestBodyPropertyValues{}
	}
	return o.PropertyValues
}

func (o *ProvisionWarrantyRequestBody) GetFees() []WarrantyCoverageFeeDto {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *ProvisionWarrantyRequestBody) GetMetadata() *ProvisionWarrantyRequestBodyMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ProvisionWarrantyRequestBody) GetShippingAddress() AddressDto {
	if o == nil {
		return AddressDto{}
	}
	return o.ShippingAddress
}

func (o *ProvisionWarrantyRequestBody) GetAutoActivate() *bool {
	if o == nil {
		return nil
	}
	return o.AutoActivate
}

func (o *ProvisionWarrantyRequestBody) GetQuoteSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.QuoteSubtotal
}

func (o *ProvisionWarrantyRequestBody) GetQuoteTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.QuoteTotal
}
