// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
)

type CreateAccountDtoOwnerType string

const (
	CreateAccountDtoOwnerTypeAccountIndividualOwnerDto CreateAccountDtoOwnerType = "AccountIndividualOwnerDto"
	CreateAccountDtoOwnerTypeAccountBusinessOwnerDto   CreateAccountDtoOwnerType = "AccountBusinessOwnerDto"
)

type CreateAccountDtoOwner struct {
	AccountIndividualOwnerDto *AccountIndividualOwnerDto
	AccountBusinessOwnerDto   *AccountBusinessOwnerDto

	Type CreateAccountDtoOwnerType
}

func CreateCreateAccountDtoOwnerAccountIndividualOwnerDto(accountIndividualOwnerDto AccountIndividualOwnerDto) CreateAccountDtoOwner {
	typ := CreateAccountDtoOwnerTypeAccountIndividualOwnerDto

	return CreateAccountDtoOwner{
		AccountIndividualOwnerDto: &accountIndividualOwnerDto,
		Type:                      typ,
	}
}

func CreateCreateAccountDtoOwnerAccountBusinessOwnerDto(accountBusinessOwnerDto AccountBusinessOwnerDto) CreateAccountDtoOwner {
	typ := CreateAccountDtoOwnerTypeAccountBusinessOwnerDto

	return CreateAccountDtoOwner{
		AccountBusinessOwnerDto: &accountBusinessOwnerDto,
		Type:                    typ,
	}
}

func (u *CreateAccountDtoOwner) UnmarshalJSON(data []byte) error {

	var accountIndividualOwnerDto AccountIndividualOwnerDto = AccountIndividualOwnerDto{}
	if err := utils.UnmarshalJSON(data, &accountIndividualOwnerDto, "", true, true); err == nil {
		u.AccountIndividualOwnerDto = &accountIndividualOwnerDto
		u.Type = CreateAccountDtoOwnerTypeAccountIndividualOwnerDto
		return nil
	}

	var accountBusinessOwnerDto AccountBusinessOwnerDto = AccountBusinessOwnerDto{}
	if err := utils.UnmarshalJSON(data, &accountBusinessOwnerDto, "", true, true); err == nil {
		u.AccountBusinessOwnerDto = &accountBusinessOwnerDto
		u.Type = CreateAccountDtoOwnerTypeAccountBusinessOwnerDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateAccountDtoOwner", string(data))
}

func (u CreateAccountDtoOwner) MarshalJSON() ([]byte, error) {
	if u.AccountIndividualOwnerDto != nil {
		return utils.MarshalJSON(u.AccountIndividualOwnerDto, "", true)
	}

	if u.AccountBusinessOwnerDto != nil {
		return utils.MarshalJSON(u.AccountBusinessOwnerDto, "", true)
	}

	return nil, errors.New("could not marshal union type CreateAccountDtoOwner: all fields are null")
}

type CreateAccountDto struct {
	// Currency of all transactions in the account
	Currency *string `default:"USD" json:"currency"`
	// Name of the account
	Name string `json:"name"`
	// Short-form description of the account
	Description *string `json:"description"`
	// Unique identifier of the customer linked to this account. (Only applicable when `distributorId` is `null`)
	CustomerID *string `default:"null" json:"customerId"`
	// Unique identifier of the distributor linked to this account. (Only applicable when `customerId` is `null`)
	DistributorID *string               `default:"null" json:"distributorId"`
	Owner         CreateAccountDtoOwner `json:"owner"`
}

func (c CreateAccountDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountDto) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateAccountDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAccountDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateAccountDto) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreateAccountDto) GetDistributorID() *string {
	if o == nil {
		return nil
	}
	return o.DistributorID
}

func (o *CreateAccountDto) GetOwner() CreateAccountDtoOwner {
	if o == nil {
		return CreateAccountDtoOwner{}
	}
	return o.Owner
}
