// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"time"
)

// RetrievePaymentResponseStatus - Current status of the payment
type RetrievePaymentResponseStatus string

const (
	RetrievePaymentResponseStatusDraft             RetrievePaymentResponseStatus = "DRAFT"
	RetrievePaymentResponseStatusVoided            RetrievePaymentResponseStatus = "VOIDED"
	RetrievePaymentResponseStatusPending           RetrievePaymentResponseStatus = "PENDING"
	RetrievePaymentResponseStatusPaid              RetrievePaymentResponseStatus = "PAID"
	RetrievePaymentResponseStatusFailed            RetrievePaymentResponseStatus = "FAILED"
	RetrievePaymentResponseStatusProcessing        RetrievePaymentResponseStatus = "PROCESSING"
	RetrievePaymentResponseStatusRefunded          RetrievePaymentResponseStatus = "REFUNDED"
	RetrievePaymentResponseStatusPartiallyRefunded RetrievePaymentResponseStatus = "PARTIALLY_REFUNDED"
	RetrievePaymentResponseStatusProcessingRefund  RetrievePaymentResponseStatus = "PROCESSING_REFUND"
)

func (e RetrievePaymentResponseStatus) ToPointer() *RetrievePaymentResponseStatus {
	return &e
}
func (e *RetrievePaymentResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "VOIDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "PAID":
		fallthrough
	case "FAILED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "REFUNDED":
		fallthrough
	case "PARTIALLY_REFUNDED":
		fallthrough
	case "PROCESSING_REFUND":
		*e = RetrievePaymentResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePaymentResponseStatus: %v", v)
	}
}

type RetrievePaymentResponse struct {
	// Unique ID of the payment
	ID string `json:"id"`
	// Unique ID of the payment in its payment method's associated gateway
	ExternalID  *string `json:"externalId"`
	ReferenceID *string `json:"referenceId"`
	// Unique ID of the payment's user
	UserID string `json:"userId"`
	// User details of the payment
	User *UserAggregate `json:"user,omitempty"`
	// Unique ID of the payment's payment method
	PaymentMethodID string `json:"paymentMethodId"`
	// Payment method details of the payment
	PaymentMethod *PaymentMethodAggregate `json:"paymentMethod,omitempty"`
	// Short title of the payment
	Title string `json:"title"`
	// Long description of the payment
	Description *string `json:"description"`
	// Datetime when the object was created.
	Created time.Time `json:"created"`
	// Datetime when the object was last modified.
	Modified time.Time `json:"modified"`
	// Name of whom the payment is for
	ShipToName *string `json:"shipToName"`
	// Email of whom the payment is for
	ShipToEmail *string `json:"shipToEmail"`
	// Shipping address of the payment (used in tax calculations)
	ShippingAddress AddressAggregate `json:"shippingAddress"`
	// Datetime when the payment is due and will automatically be processed
	DueDate *time.Time `json:"dueDate"`
	// Datetime when the payment was successfully processed and paid
	PaymentDate *time.Time `json:"paymentDate"`
	// Amount in cents of the payment (inclusive of all taxes)
	Amount float64 `json:"amount"`
	// Subtotal in cents of the payment (exclusive of all taxes)
	Subtotal float64 `json:"subtotal"`
	// Total tax amount in cents
	TaxAmount float64 `json:"taxAmount"`
	// Total refunded amount in cents
	RefundedAmount *float64 `json:"refundedAmount"`
	// Breakdown of taxes applied to the payment
	Taxes []PaymentTaxAggregate `json:"taxes,omitempty"`
	// Gateway details for the payment (may contain error messages when applicable)
	Details *string `json:"details"`
	// Current status of the payment
	Status RetrievePaymentResponseStatus `json:"status"`
	// List of all status changes of the payment
	StatusChanges  []StatusChangeAggregate   `json:"statusChanges"`
	PriceBreakdown []PriceBreakdownAggregate `json:"priceBreakdown"`
	PropertyBag    []string                  `json:"propertyBag"`
	ReceiptURL     string                    `json:"receiptUrl"`
}

func (r RetrievePaymentResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePaymentResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePaymentResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrievePaymentResponse) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *RetrievePaymentResponse) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *RetrievePaymentResponse) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *RetrievePaymentResponse) GetUser() *UserAggregate {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *RetrievePaymentResponse) GetPaymentMethodID() string {
	if o == nil {
		return ""
	}
	return o.PaymentMethodID
}

func (o *RetrievePaymentResponse) GetPaymentMethod() *PaymentMethodAggregate {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *RetrievePaymentResponse) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *RetrievePaymentResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RetrievePaymentResponse) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *RetrievePaymentResponse) GetModified() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Modified
}

func (o *RetrievePaymentResponse) GetShipToName() *string {
	if o == nil {
		return nil
	}
	return o.ShipToName
}

func (o *RetrievePaymentResponse) GetShipToEmail() *string {
	if o == nil {
		return nil
	}
	return o.ShipToEmail
}

func (o *RetrievePaymentResponse) GetShippingAddress() AddressAggregate {
	if o == nil {
		return AddressAggregate{}
	}
	return o.ShippingAddress
}

func (o *RetrievePaymentResponse) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *RetrievePaymentResponse) GetPaymentDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *RetrievePaymentResponse) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *RetrievePaymentResponse) GetSubtotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Subtotal
}

func (o *RetrievePaymentResponse) GetTaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TaxAmount
}

func (o *RetrievePaymentResponse) GetRefundedAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.RefundedAmount
}

func (o *RetrievePaymentResponse) GetTaxes() []PaymentTaxAggregate {
	if o == nil {
		return nil
	}
	return o.Taxes
}

func (o *RetrievePaymentResponse) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *RetrievePaymentResponse) GetStatus() RetrievePaymentResponseStatus {
	if o == nil {
		return RetrievePaymentResponseStatus("")
	}
	return o.Status
}

func (o *RetrievePaymentResponse) GetStatusChanges() []StatusChangeAggregate {
	if o == nil {
		return []StatusChangeAggregate{}
	}
	return o.StatusChanges
}

func (o *RetrievePaymentResponse) GetPriceBreakdown() []PriceBreakdownAggregate {
	if o == nil {
		return []PriceBreakdownAggregate{}
	}
	return o.PriceBreakdown
}

func (o *RetrievePaymentResponse) GetPropertyBag() []string {
	if o == nil {
		return []string{}
	}
	return o.PropertyBag
}

func (o *RetrievePaymentResponse) GetReceiptURL() string {
	if o == nil {
		return ""
	}
	return o.ReceiptURL
}
