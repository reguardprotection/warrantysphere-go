// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"github.com/reguardprotection/warrantysphere/models/components"
)

type Feed string

const (
	FeedStaff    Feed = "staff"
	FeedCustomer Feed = "customer"
)

func (e Feed) ToPointer() *Feed {
	return &e
}
func (e *Feed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staff":
		fallthrough
	case "customer":
		*e = Feed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Feed: %v", v)
	}
}

type ListClaimNotesQueryControllerListRequest struct {
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	Page  *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The unique identifier of the user who created the note.
	CreatedByID *string `queryParam:"style=form,explode=true,name=createdById"`
	// Search string used to filter notes by their title and content.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The feeds of users who can view the note.
	Feed []Feed `queryParam:"style=form,explode=true,name=feed"`
	// Unique identifier of the claim used to filter the claim notes.
	ClaimID string `pathParam:"style=simple,explode=false,name=claimId"`
}

func (l ListClaimNotesQueryControllerListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListClaimNotesQueryControllerListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListClaimNotesQueryControllerListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListClaimNotesQueryControllerListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListClaimNotesQueryControllerListRequest) GetCreatedByID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedByID
}

func (o *ListClaimNotesQueryControllerListRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ListClaimNotesQueryControllerListRequest) GetFeed() []Feed {
	if o == nil {
		return nil
	}
	return o.Feed
}

func (o *ListClaimNotesQueryControllerListRequest) GetClaimID() string {
	if o == nil {
		return ""
	}
	return o.ClaimID
}

type ListClaimNotesQueryControllerListResponse struct {
	HTTPMeta               components.HTTPMetadata `json:"-"`
	ListClaimNotesResponse *components.ListClaimNotesResponse
}

func (o *ListClaimNotesQueryControllerListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListClaimNotesQueryControllerListResponse) GetListClaimNotesResponse() *components.ListClaimNotesResponse {
	if o == nil {
		return nil
	}
	return o.ListClaimNotesResponse
}
