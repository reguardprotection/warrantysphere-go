// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"github.com/reguardprotection/warrantysphere/models/components"
)

type Statuses string

const (
	StatusesOpen      Statuses = "OPEN"
	StatusesCancelled Statuses = "CANCELLED"
	StatusesClosed    Statuses = "CLOSED"
	StatusesExpired   Statuses = "EXPIRED"
)

func (e Statuses) ToPointer() *Statuses {
	return &e
}
func (e *Statuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CLOSED":
		fallthrough
	case "EXPIRED":
		*e = Statuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Statuses: %v", v)
	}
}

type ClaimItemStatuses string

const (
	ClaimItemStatusesDraft    ClaimItemStatuses = "DRAFT"
	ClaimItemStatusesApproved ClaimItemStatuses = "APPROVED"
	ClaimItemStatusesRejected ClaimItemStatuses = "REJECTED"
	ClaimItemStatusesResolved ClaimItemStatuses = "RESOLVED"
)

func (e ClaimItemStatuses) ToPointer() *ClaimItemStatuses {
	return &e
}
func (e *ClaimItemStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "RESOLVED":
		*e = ClaimItemStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimItemStatuses: %v", v)
	}
}

type ClaimPaymentStatuses string

const (
	ClaimPaymentStatusesDraft     ClaimPaymentStatuses = "DRAFT"
	ClaimPaymentStatusesIssued    ClaimPaymentStatuses = "ISSUED"
	ClaimPaymentStatusesFailed    ClaimPaymentStatuses = "FAILED"
	ClaimPaymentStatusesVoided    ClaimPaymentStatuses = "VOIDED"
	ClaimPaymentStatusesCompleted ClaimPaymentStatuses = "COMPLETED"
)

func (e ClaimPaymentStatuses) ToPointer() *ClaimPaymentStatuses {
	return &e
}
func (e *ClaimPaymentStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "ISSUED":
		fallthrough
	case "FAILED":
		fallthrough
	case "VOIDED":
		fallthrough
	case "COMPLETED":
		*e = ClaimPaymentStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClaimPaymentStatuses: %v", v)
	}
}

type ListClaimsQueryControllerListRequest struct {
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	Page  *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Unique identifier of the coverage used to filter claims.
	CoverageID *string `queryParam:"style=form,explode=true,name=coverageId"`
	// Unique identifier of the warranty (contract) used to filter claims.
	WarrantyID *string `queryParam:"style=form,explode=true,name=warrantyId"`
	// Unique identifier of the customer used to filter claims.
	CustomerID *string `queryParam:"style=form,explode=true,name=customerId"`
	// Distributors used to filter claims.
	DistributorIds []string `queryParam:"style=form,explode=true,name=distributorIds"`
	// Search string used to filter claims by claim number.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Statuses used to filter claims.
	Statuses []Statuses `queryParam:"style=form,explode=true,name=statuses"`
	// Statuses used to filter claim items.
	ClaimItemStatuses []ClaimItemStatuses `queryParam:"style=form,explode=true,name=claimItemStatuses"`
	// Statuses used to filter claim payments.
	ClaimPaymentStatuses []ClaimPaymentStatuses `queryParam:"style=form,explode=true,name=claimPaymentStatuses"`
}

func (l ListClaimsQueryControllerListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListClaimsQueryControllerListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListClaimsQueryControllerListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListClaimsQueryControllerListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListClaimsQueryControllerListRequest) GetCoverageID() *string {
	if o == nil {
		return nil
	}
	return o.CoverageID
}

func (o *ListClaimsQueryControllerListRequest) GetWarrantyID() *string {
	if o == nil {
		return nil
	}
	return o.WarrantyID
}

func (o *ListClaimsQueryControllerListRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListClaimsQueryControllerListRequest) GetDistributorIds() []string {
	if o == nil {
		return nil
	}
	return o.DistributorIds
}

func (o *ListClaimsQueryControllerListRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ListClaimsQueryControllerListRequest) GetStatuses() []Statuses {
	if o == nil {
		return nil
	}
	return o.Statuses
}

func (o *ListClaimsQueryControllerListRequest) GetClaimItemStatuses() []ClaimItemStatuses {
	if o == nil {
		return nil
	}
	return o.ClaimItemStatuses
}

func (o *ListClaimsQueryControllerListRequest) GetClaimPaymentStatuses() []ClaimPaymentStatuses {
	if o == nil {
		return nil
	}
	return o.ClaimPaymentStatuses
}

type ListClaimsQueryControllerListResponse struct {
	HTTPMeta                    components.HTTPMetadata `json:"-"`
	ListClaimsQueryResponseBody *components.ListClaimsQueryResponseBody
}

func (o *ListClaimsQueryControllerListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListClaimsQueryControllerListResponse) GetListClaimsQueryResponseBody() *components.ListClaimsQueryResponseBody {
	if o == nil {
		return nil
	}
	return o.ListClaimsQueryResponseBody
}
