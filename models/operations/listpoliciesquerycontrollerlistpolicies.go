// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/reguardprotection/warrantysphere/internal/utils"
	"github.com/reguardprotection/warrantysphere/models/components"
)

type Status string

const (
	StatusDraft     Status = "DRAFT"
	StatusPublished Status = "PUBLISHED"
	StatusArchived  Status = "ARCHIVED"
	StatusRunoff    Status = "RUNOFF"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PUBLISHED":
		fallthrough
	case "ARCHIVED":
		fallthrough
	case "RUNOFF":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type ListPoliciesQueryControllerListPoliciesRequest struct {
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	Page  *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Search
	Search *string `queryParam:"style=form,explode=true,name=search"`
	Status *Status `queryParam:"style=form,explode=true,name=status"`
	// Unique identifier of the policy this coverage is linked to.
	PolicyIds *string `queryParam:"style=form,explode=true,name=policyIds"`
	// Unique identifier for a property set.
	PropertySetIds *string `queryParam:"style=form,explode=true,name=propertySetIds"`
	// When set to true only the lastest version of each policy will be shown.
	OnlyLatestVersion *bool `queryParam:"style=form,explode=true,name=onlyLatestVersion"`
}

func (l ListPoliciesQueryControllerListPoliciesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPoliciesQueryControllerListPoliciesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetPolicyIds() *string {
	if o == nil {
		return nil
	}
	return o.PolicyIds
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetPropertySetIds() *string {
	if o == nil {
		return nil
	}
	return o.PropertySetIds
}

func (o *ListPoliciesQueryControllerListPoliciesRequest) GetOnlyLatestVersion() *bool {
	if o == nil {
		return nil
	}
	return o.OnlyLatestVersion
}

type ListPoliciesQueryControllerListPoliciesResponse struct {
	HTTPMeta                  components.HTTPMetadata `json:"-"`
	ListPoliciesQueryResponse *components.ListPoliciesQueryResponse
}

func (o *ListPoliciesQueryControllerListPoliciesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListPoliciesQueryControllerListPoliciesResponse) GetListPoliciesQueryResponse() *components.ListPoliciesQueryResponse {
	if o == nil {
		return nil
	}
	return o.ListPoliciesQueryResponse
}
